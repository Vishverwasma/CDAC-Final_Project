Pharmacist :=

login : 

{
  "email":"",
  "password":""
}

signup :

{
  "name":"",
  "licenseNumber":"",
  "email":"",
  "password":"" ,
  "address":""
}
-------------------------------
Distributor :=

login : 

{
  "email":"",
  "password":"" 
}

signup :

{
  "name":"",
  "licenseNumber":"",
  "email":"",
  "password":"" ,
  "address":""
}
-------------------------------
Cart-medicine :=

add to cart ->
{
  "medicinename": "",
  "categoryid": 1, // ID of the category the medicine belongs to
  "medicineQuantity": 5, // Quantity of the medicine
  "manufactureDate": "2024-02-10", // Manufacture date of the medicine (format: yyyy-MM-dd)
  "unitPrice": 3, // Unit price of the medicine
  "pharmacistId": 61, // ID of the pharmacist
  "medicineId": 6 // ID of the medicine
}


/cart/medicine/create (POST)::

{
  "medicineId": 1,
  "pharmacistId": 1,
  "medicineQuantity": 5
}

/cart/medicine/put/{pharmacistId}/{medsId} (PUT): :
{
  "pharmacistId": 1,
  "medicineId": 1,
  "quantity": 10,
  "price": 50
}

------------------------------------
cart :=

/cart/create/{pharmacistId} (POST)::

{
  "pharmacistId": 1
}

/cart/addMedicine (POST)::

{
  "pID": 1,
  "quantity": 2
}

cart/get/{pharmacistId}::


------------------------------------

Address :=


/address/add (POST)::

{
  "pharmacistid": 1,
  "name": "John Doe",
  "FullAddress": "123 Main St, City, Country"
}

/address/{addressId} (GET)::

/address/pharmacist/{pharmacistId} (GET)::


/address/update/{addressId} (PUT): :

{
  "pharmacistid": 1,
  "name": "Updated Name",
  "FullAddress": "Updated Address"
}


/address/delete/{addressId} (DELETE)::

----------------------------------------------


Medicine :

/medicine/create (POST)::


{
  "name": "Paracetamol",
  "categoryId": 1,
  "quantity": 100,
  "manufactureDate": "2022-01-15",
  "unitPrice": 10
}

/medicine/delete/{id} (DELETE)::


/medicine/update/{id} (PUT)::

{
  "name": "Updated Paracetamol",
  "categoryId": 2,
  "quantity": 150,
  "manufactureDate": "2022-01-15",
  "unitPrice": 15
}

/medicine/get/{id} (GET)::



/medicine/getByCategory/{categoryId} (GET)::


/medicine/search (GET)::

{
  "medicineName": "Paracetamol",
  "categoryId": 1,
  "quantity": 100,
  "price": 10,
  "manufactureDate": "2022-01-15"
}

----------------------------------------------

Order :

{
  "om": [
    {
      "id": 1,
      "medicine": {
        "id": 1,
        "name": "Paracetamol",
        "categoryId": 1,
        "quantity": 10,
        "manufactureDate": "2022-01-01",
        "unitPrice": 5
      },
      "quantity": 2
    }
  ],
  "medicineId": 1,
  "medicineName": "Paracetamol",
  "pharmacistId": 1,
  "pharmacistName": "John Doe",
  "price": 10.0,
  "orderDate": "2024-02-24T12:00:00",
  "deliveryDate": "2024-02-26T12:00:00",
  "billId": 1001,
  "createdAt": "2024-02-24T12:00:00"
}



Sure, let's map out the CRUD (Create, Read, Update, Delete) operations for the `Order` entity in your application.

### Create (POST)

1. **Create Order:**
   - **Endpoint:** POST `/orders/create`
   - **Request Body:** JSON object containing `Pharmacist` and `Address` details.
   - **Controller Method:** `createOrder`
   - **Service Method:** `createOrder`
   - **Repository Method:** Save the `Order` entity to the database.

### Read (GET)

2. **Get Order by ID:**
   - **Endpoint:** GET `/orders/{orderId}`
   - **Controller Method:** `getOrderById`
   - **Service Method:** `findOrderByld`
   - **Repository Method:** Use `findById` in `OrderRepository`.

3. **Get Orders by Pharmacist ID:**
   - **Endpoint:** GET `/orders/pharmacist/{pharmacistId}`
   - **Controller Method:** `getPharmacistOrders`
   - **Service Method:** `pharmacistOrdersHistory`
   - **Repository Method:** Use a custom query in `OrderRepository` to find orders by pharmacist ID.

4. **Get All Orders:**
   - **Endpoint:** GET `/orders/all`
   - **Controller Method:** Not implemented yet
   - **Service Method:** `getAllOrders`
   - **Repository Method:** Use `findAll` in `OrderRepository`.

### Update (PUT)

5. **Update Order:**
   - **Endpoint:** PUT `/orders/{orderId}`
   - **Request Body:** JSON object containing updated order details.
   - **Controller Method:** Not implemented yet
   - **Service Method:** Not implemented yet
   - **Repository Method:** Use `save` in `OrderRepository` to update the order.

### Delete (DELETE)

6. **Delete Order:**
   - **Endpoint:** DELETE `/orders/{orderId}`
   - **Controller Method:** Not implemented yet
   - **Service Method:** `deleteOrder`
   - **Repository Method:** Use `deleteById` in `OrderRepository`.

Please note that I've mentioned some methods as "Not implemented yet". You'll need to implement these methods in your controller, service, and repository layers to support the respective CRUD operations.

Feel free to ask if you need further clarification or assistance with any specific part of the implementation!

--------------------------------------------------
OrderMedicine ::

{
  "id": 1,
  "medicine": {
    "id": 1,
    "name": "Paracetamol",
    "categoryId": 1,
    "quantity": 10,
    "manufactureDate": "2022-01-01",
    "unitPrice": 5
  },
  "quantity": 2
}

--------------------------------------------------

