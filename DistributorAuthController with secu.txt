//DistributorAuthController with security and jwt dependencies

package com.cdac_project.controller;

import org.apache.catalina.authenticator.SpnegoAuthenticator.AuthenticateAction;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cdac_project.config.JwtProvider;
import com.cdac_project.exception.DistributorException;
import com.cdac_project.model.Distributor;
import com.cdac_project.repository.DistributorRepository;
import com.cdac_project.request.LoginRequest;
import com.cdac_project.response.AuthResponse;
import com.cdac_project.service.CustomDistributorServiceImplementation;

import net.bytebuddy.asm.Advice.This;

@RestController
@RequestMapping("/dist")
public class DistributorAuthController {

	private DistributorRepository distributorRepository;
	private JwtProvider jwtProvider;
	private PasswordEncoder passwordEncoder;
	private CustomDistributorServiceImplementation customDistributorService;
	
	
	public DistributorAuthController(DistributorRepository distributorRepository,CustomDistributorServiceImplementation customDistributorService,PasswordEncoder passwordEncoder,JwtProvider jwtProvider) {
		this.distributorRepository=distributorRepository;
		this.customDistributorService=customDistributorService;
		this.passwordEncoder=passwordEncoder;
		this.jwtProvider=jwtProvider;
	}
	
	
	@PostMapping("/signup")
	public ResponseEntity<AuthResponse>createUserHandler(@RequestBody Distributor distributor) throws DistributorException{
		
		String email = distributor.getDistributor_Email();
		String name = distributor.getDistributor_name();
		String password = distributor.getPassword();
		
		Distributor isEmailExist = distributorRepository.findByEmail(email);
		if(isEmailExist!=null) {
			throw new DistributorException("Email is Already in Ise with Another Account! ");
		}
		Distributor createdDistributor = new Distributor();
		createdDistributor.setDistributor_Email(email);
		createdDistributor.setPassword(passwordEncoder.encode(password));
		createdDistributor.setDistributor_name(name);
		
		Distributor savedDistributor = distributorRepository.save(createdDistributor);
		Authentication authentication = new UsernamePasswordAuthenticationToken(savedDistributor.getDistributor_Email(), savedDistributor.getPassword());
		SecurityContextHolder.getContext().setAuthentication(authentication);
		String token = jwtProvider.generateToken(authentication);
		
		AuthResponse authResponse = new AuthResponse();
		authResponse.setJwt(token);
		authResponse.setMessage("Sign-Up Success");
		
		return new ResponseEntity<AuthResponse>(authResponse,HttpStatus.CREATED);
	}
	
	@PostMapping("/signin")
	public ResponseEntity<AuthResponse>loginUserHandler(@RequestBody LoginRequest loginRequest){
		
		String username = loginRequest.getEmail();
		String password = loginRequest.getPassoword();
		Authentication authentication = authenticate(username,password);
		SecurityContextHolder.getContext().setAuthentication(authentication);
		
String token = jwtProvider.generateToken(authentication);
		
		AuthResponse authResponse = new AuthResponse();
		authResponse.setJwt(token);
		authResponse.setMessage("Sign-In Success");
		
		return new ResponseEntity<AuthResponse>(authResponse,HttpStatus.CREATED);
	}


	private Authentication authenticate(String username, String password) {
		// TODO Auto-generated method stub
		UserDetails userDetails = customDistributorService.loadUserByUsername(username);
		if (userDetails==null) {
			throw new BadCredentialsException("Invalid Username");
		}
		if(!passwordEncoder.matches(password, userDetails.getPassword())) {
			throw new BadCredentialsException("In-Valid Password!");
		}
		return new UsernamePasswordAuthenticationToken(userDetails,null , userDetails.getAuthorities());
	}
}
