AuthController With Security and JwtDependencies::


package com.cdac_project.controller;

import org.apache.catalina.authenticator.SpnegoAuthenticator.AuthenticateAction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cdac_project.config.JwtProvider;
import com.cdac_project.exception.PharmacistException;
import com.cdac_project.model.Pharmacist;
import com.cdac_project.repository.PhramacistRepository;
import com.cdac_project.request.LoginRequest;
import com.cdac_project.response.AuthResponse;
import com.cdac_project.service.CustomPharmacistServiceImplementation;

@RestController
@RequestMapping("/pharm")
public class AuthController {

	private PhramacistRepository pharmacistRepository;
	private JwtProvider jwtProvider;
	private PasswordEncoder passwordEncoder;
	private CustomPharmacistServiceImplementation customPharmacistService;
	
	
	public AuthController(PhramacistRepository pharmacistRepository,CustomPharmacistServiceImplementation customPharmacistService,PasswordEncoder passwordEncoder,JwtProvider jwtProvider) {
		this.pharmacistRepository=pharmacistRepository;
		this.customPharmacistService=customPharmacistService;
		this.passwordEncoder=passwordEncoder;
		this.jwtProvider=jwtProvider;
	}
	
	@Autowired
	@PostMapping("/signup")
	public ResponseEntity<AuthResponse>createUserHandler(@RequestBody Pharmacist pharmacist) throws PharmacistException{
		
		String email = pharmacist.getP_Email();
		String name = pharmacist.getP_Name();
		String address = pharmacist.getAddress();
		String password = pharmacist.getPassword();
		
		Pharmacist isEmailExist = pharmacistRepository.findByEmail(email);
		if(isEmailExist!=null) {
			throw new PharmacistException("Email is Already in Use with Another Account! ");
		}
		Pharmacist createdPharmacist = new Pharmacist();
		createdPharmacist.setP_Email(email);
		createdPharmacist.setPassword(passwordEncoder.encode(password));
		createdPharmacist.setP_Name(name);
		createdPharmacist.setAddress(address);
		
		Pharmacist savedPharmacist = pharmacistRepository.save(createdPharmacist);
		Authentication authentication = new UsernamePasswordAuthenticationToken(savedPharmacist.getP_Email(), savedPharmacist.getPassword());
		SecurityContextHolder.getContext().setAuthentication(authentication);
		String token = jwtProvider.generateToken(authentication);
		
		AuthResponse authResponse = new AuthResponse();
		authResponse.setJwt(token);
		authResponse.setMessage("Sign-Up Success");
		
		return new ResponseEntity<AuthResponse>(authResponse,HttpStatus.CREATED);
	}

	@Autowired
	@PostMapping("/signin")
	public ResponseEntity<AuthResponse>loginUserHandler(@RequestBody LoginRequest loginRequest){
		
		String username = loginRequest.getEmail();
		String password = loginRequest.getPassoword();
		Authentication authentication = authenticate(username,password);
		SecurityContextHolder.getContext().setAuthentication(authentication);
		
String token = jwtProvider.generateToken(authentication);
		
		AuthResponse authResponse = new AuthResponse();
		authResponse.setJwt(token);
		authResponse.setMessage("Sign-In Success");
		
		return new ResponseEntity<AuthResponse>(authResponse,HttpStatus.CREATED);
	}


	private Authentication authenticate(String username, String password) {
		// TODO Auto-generated method stub
		UserDetails userDetails = customPharmacistService.loadUserByUsername(username);
		if (userDetails==null) {
			throw new BadCredentialsException("Invalid Username");
		}
		if(!passwordEncoder.matches(password, userDetails.getPassword())) {
			throw new BadCredentialsException("In-Valid Password!");
		}
		return new UsernamePasswordAuthenticationToken(userDetails,null , userDetails.getAuthorities());
	}
}
